js dev environment
	
	text editor
		atom
		webstorm
		brackets
		vscode ++
		
		.editorconfig
		
	package manager
		bower
		npm ++
		jspm
		jam
		vaolo
	package security
		retire js
		node security platform
	dev web server
		http-server
		live-server
		express ++
			koa
			hapi
		budo
		webpack dev server
		browsersync - webpack, browserify, gulp
	share work in progress
		not azure, aws, google compute as it is heavy to start
		
		localtunnel + browsersync!!!
		ngrok
		surge
		now
		
	automation
		grunt
			config file
			config over code
			writes files between steps
		gulp ++
			in memory streams - pipes
			fast
			code over configuration
			large plugin ecosystem
		npm scripts ++
			leverage your os
			declared i package json
			directly use npm packages
			call sepearate node scripts
			convetion based hooks
			tools from largest package manaer (npm)
			use tools direclty
			no need for separate plugins
			simpler debugging
			better docs
			easy to learn
			simple
		shell scripts
		
	transpiling
		list of languages that compile to js
		babel +++
		typescript ++ 
		elm +
		
	bundling
		commonjs doesn't work in web browser
		package project into files
		improve node 
			iife --
			amd --
			commonjs +
			umd
			es6 modules +++
				standardized
				statically analyzable
					improved autocomplete
					intelligent refactroing
					failes fast
					tree shaking
				easy to read
					named import
					default exports
					
		selecting a bundler
			require js -- old way
			browserify ++
			webpack +++
			rollup +
			jspmv +++
		
			sourcemaps !!!
			
	linting
		enforce consistency - curly brace position, confrim/alert, trailing commas, globals, eval
		avoid mistakes - extra prenthesis, overwriting funciton, assignment in conditional, missing edefault case in switch, debugger/console.log
		
		pick a linter
			jslint
			jshint
			eslint +++

		eslint decisions:
			1. config file format
			2. which rules -whole team should decide
			3. warnings or errors
			4. plugins?
			5. use a preset?
				from scratch
				recommended +++
				presets - airbnb, xo, standardjs
				
		eslint-loader vs eslint-watch
			eslint-watch - esw
			comments disable some rules
			
	testing and continious integartion
		unit testing - single function or modules
		integration - interactions between modules
		ui - automate interactions with ui - selenium
		
		unit testing decisions
			1. framework
				mocha, jasmine, tape, qunit, ava, jest
			2. assertion library
				chai, should.js, expect
			3. helper libraries
				jsdom, cheerio
			4. where to run tests
				browser 
					karma, testem
				headless browser
					phantomjs
				in-memyr dom
					jsdom
			5. where to place your test files
				centralized vs alongside
			6. when to run tests
				after every save:
					rapid feedback
					facitilitates tdd
					automatic = low friction
					
		mocha + chai + jsdom
		
		CI
			travis ci - linux env
			appveyor - windows env
			jenkins
			circle ci
			semaphore
			snap ci
			
	HTTP Calls:
		Making HTTP Calls
		Mocking HTTP Calls	
			why mock?
			mocking approaches
			generate mock data and mock API
			
		node:
			http
			request +++
		browser:
			xmlHttpRequest
			jquery
			framework-based (angular)
			fetch (What Working Group) +++
		node & browser:
			isomorphic-fetch +
			xhr (npm package) +
			SuperAgent +
			Axios +
			
		Why centralize api call?
			1.spot
				configure all calls
				handle preloader logic
				handle errors
				single seam for mocking
				
			polyfill.io
		
		Mock HTTP
			Nock
			Static JSON
			Dev webserver
				api-mock
				JSON server
				JSON Schema faker
					faker.js
					chance.js
					randexp.js
				Browsersync
				Express
				
		json
			jsonschema
			json content rules
			json ld
			raml
			
		advanced rest client
		
	project structure:
		
		1. put js in .js file
			never put js inline
			avoid generating auto code for users
			generate data from the server than used to fork logic
		2. 	organize by file typescript
				organize by feature +++			
		3.  Extract logic to POJOs
			
		4. include an example app!!!
		
	production build
		minification
			shorten vars and function names
			remove comments
			remove whitespace and new line
			dead code elimination / tree-shaking
			debug via source map
		sourcemaps
		dynamic html
			html webpack bundle
			inject js via node
		bundle splitting
			per page
			separate 3rd party from app code (main and vendor js)
		cache busting
			save http requests
			force request for the latest version
			plan:
				1. Hash bundle filename
				2. Generate HTML dynamically
		error logging
			track.js
			sentry
			new relic
			raygun
			
		error logging decisions:
			error metadata:
				browser
				stack trace
				custom api for enhanced tracking
				previous actions
			notifications & integartions
			analytics and filtering
			pricint
			
		conditional html
			ejs, jade, underscore, handlebards -	
			
	production deployment
		separating ui from the api
			simple low-ris ui only deploys
			seprates concerns
				separate teams
				less to understand
				scale back-end separately
			cheap ui hosting
			server ui via a content delivery network
			
		hosting providers
			aws
			azure
			heroku - host api 
			firebase
			google cloud platform
			netlify	- static only
			githubpages - static only
			surge - static only - host ui
		automated deployment
			heroku
			ui - npm start, npm run build, npm run deploy
		handing starter kit updates
			update approaches:
				yeoman
					create yeoman generator from your starter kit
						update yeoman:
							commit
							scaffold over the existing project
							resolve conflicts manually
				github
					host on github
					fork starter kit for new project
					pull changes from master as starter kit is enchanced
				npm
					encapsulate kit in npm package
					update npm package to receive latest
					-- can't tweak package for current project
				
					what can we centralize:
						buildscripts -npm package
						npm scripts in package.json
						webpack.config
						.eslintrc

					decentralized
						.editorconfig
						.babelrc
						CI config (.travi.yml, Appveyor.yml)
						Package references in package.json
		inspiration
			http://andrewhfarmer.com/starter-project/
			https://github.com/gianarb/awesome-angularjs
			framework name + development environment, boilerplate, starter kit, starter project, seed
		
		challenge